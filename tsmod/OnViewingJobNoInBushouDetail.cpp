#include "WinTarget.h"

#include "CommonGlobalHandle.h"
#include "CurProcessMemory.h"
#include "CurProcessGameMemory.h"
#include "GameDataStruct.h"
#include "TSModCommand.h"
#include "VariableNameRegistAndJudge.h"




// デフォルトで組み込まれている「海賊・高家・商人・庶民」のデータを探し、ここでジョブIDを変える。データからロードして、武将へと設定する。
extern byte nb6_all_bushou_job_ex[GAMEDATASTRUCT_RETSUDEN_NUM];

// 対象ジョブの対象の武将ID(配列上ではなく、属性の値である(配列より+1多い数))
int iViewingJobNoInBushouID = 0;
int iViewingJobNoInJobID = 0;


void setJobEXOfCurABushou(int iBushouID) {

	// 死亡していれば相手にしない
	if (nb6bushouname[iBushouID].State == 7) {
		return;
	}

	// すでにジョブが設定されていれば、何もしない次へ
	if (nb6bushouref[iBushouID].job) {
		return;
	}

	if ( !IsOriginalRegistedBushou(iBushouID) ) {
		return;
	}

	// 武将IDから列伝IDを引き出す
	int iRetsudenID = nb6bushouname[iBushouID].number;

	// 列伝IDがオーバーしている(=改造EXとか1507シナリオ)のはスルー
	if (iRetsudenID >= GAMEDATASTRUCT_RETSUDEN_NUM ) {
		return;
	}

	// 列伝IDから(自動的に設定する)拡張JOBの値を出す
	int iJobID = nb6_all_bushou_job_ex[iRetsudenID];

	// まだ設定されてない有効な拡張Jobがあるならば、メモリ上とGAMEDATASTRUCTの両方を設定する。
	if (iJobID) {
		nb6bushouref[iBushouID].job = iJobID;
	}
}

void setJobEXOfCurAllBushou() {

	for ( int iBushouID=0; iBushouID<GAMEDATASTRUCT_BUSHOU_NUM; iBushouID++ ) {
		setJobEXOfCurABushou(iBushouID);
	}
}


void OnTenshouExeViewingJobNoInBushouDetailExecute() {

	// 下位４バイトが武将IDなので、マスク
	iViewingJobNoInBushouID = iViewingJobNoInBushouID & 0xFFFF;

	// まず 元々有効な職業(出自)が、すでにTENSHOU.EXE(や改造等で)設定されていたら、それは上書きしないので何もしない
	if ( iViewingJobNoInJobID ) { return; }

	// 対象の武将は、ちゃんと512内か
	if ( 0 <= iViewingJobNoInBushouID && iViewingJobNoInBushouID < GAMEDATASTRUCT_BUSHOU_NUM ) {

		// 武将IDから列伝IDを引き出す
		int iRetsudenID = (nb6bushouname[iViewingJobNoInBushouID-1].number);

		// 列伝IDがオーバーしていなければ…
		if (iRetsudenID < GAMEDATASTRUCT_RETSUDEN_NUM ) {

			// 列伝IDから(自動的に設定する)拡張JOBの値を出す
			iViewingJobNoInJobID = nb6_all_bushou_job_ex[iRetsudenID] / 16;
		}

	}
}

/*
00493D5D  |> 56             PUSH    ESI
00493D5E  |. E8 7F86F7FF    CALL    TENSHOU.0040C3E2
				└ここを JMP TSMod.OnTSExeViewingJobNoInBushouDetail と書き換えてやる実際の処理
00493D63  |. 83C4 04        ADD     ESP, 4
00493D66  |. 8BF8           MOV     EDI, EAX
00493D68  |. 85FF           TEST    EDI, EDI						ジョブが0だったら
00493D6A     74 2B          JE      SHORT TENSHOU.00493D97			名前を表示する処理を飛ばす
00493D6C  |. 68 A0000000    PUSH    0A0
*/
int pTenshouExeJumpFromToOnTenshouExeViewingJobNoInBushouDetail		=0x493D5E; // 関数はこのアドレスから、OnTenshouExeViewingJobNoInBushouDetailへとジャンプしてくる。
int pTenshouExeJumpCallFromToOnTenshouExeViewingJobNoInBushouDetail =0x40C3E2; // 元々TENSHOU.EXE内にあったCALL先
int pTenshouExeReturnLblFromOnTenshouExeViewingJobNoInBushouDetail	=0x493D6C; // 関数が最後までいくと、このTENSHOU.EXE内に直接ジャンプするというなんとも危険な行為w
// この関数はTENSHOU.EXEがメッセージを読みを終えるたびに、直接実行される。
// TENSHOU.EXE内でメッセージが構築されるタイミングでこのnaked関数が呼ばれる。
__declspec( naked ) void WINAPI OnTenshouExeViewingJobNoInBushouDetail() {
	// スタックにためておく
	__asm {

		mov iViewingJobNoInBushouID, esi	// 武将IDをコピーただし、esiの下位4バイトが武将IDなので、マスクする必要あり。

		call pTenshouExeJumpCallFromToOnTenshouExeViewingJobNoInBushouDetail

		mov iViewingJobNoInJobID, eax    // ジョブIDを保存

		push eax
		push ebx
		push ecx
		push edx
		push esp
		push ebp
		push esi
		push edi
	}
	
	// この関数内で安全にデータを加工する。
	OnTenshouExeViewingJobNoInBushouDetailExecute();

	// スタックに引き出す
	__asm {
		pop edi
		pop esi
		pop ebp
		pop esp
		pop edx
		pop ecx
		pop ebx
		pop eax
		
		// 探り当てたジョブIDをeaxにコピーする。
		mov eax, iViewingJobNoInJobID


		// 元々tenshou.exeにあった処理をここで
        add     esp, 4
        mov     edi, eax
        test    edi, edi			// ジョブが0だったら
        // JE      SHORT TENSHOU.00493D97 // 名前を表示しないように飛ばす、の処理を飛ばさないようにする。

		jmp pTenshouExeReturnLblFromOnTenshouExeViewingJobNoInBushouDetail
	}
}

/*
00493D5D  |> 56             PUSH    ESI
00493D5E  |. E8 7F86F7FF    CALL    TENSHOU.0040C3E2
				└ここを JMP TSMod.OnTSExeViewingJobNoInBushouDetail と書き換えてやる実際の処理
00493D63  |. 83C4 04        ADD     ESP, 4
00493D66  |. 8BF8           MOV     EDI, EAX
00493D68  |. 85FF           TEST    EDI, EDI
*/
char cmdOnTenshouExeJumpFromJobNoInBushouDetail[6]="\xE9";
// 元の命令が5バイト、以後の関数で生まれる命令が合計５バイトなので… 最後１つ使わない



// ニーモニック書き換え用
void WriteAsmJumperOnTenshouExeViewingJobNoInBushouDetail() {

	// まずアドレスを数字として扱う
	int iAddress = (int)OnTenshouExeViewingJobNoInBushouDetail;
	int SubAddress = iAddress - ( pTenshouExeJumpFromToOnTenshouExeViewingJobNoInBushouDetail + 5 )	;
		// ５というのは、0046C194  -E9 ????????  JMP TSMod.OnTSExeViewingJobNoInBushouDetail  の命令に必要なバイト数。要するに５バイト足すと次のニーモニック命令群に移動するのだ。そしてそこからの差分がジャンプする際の目的格として利用される。
	memcpy(cmdOnTenshouExeJumpFromJobNoInBushouDetail+1, &SubAddress, 4); // +1 はE9の次から4バイト分書き換えるから。

	// 構築したニーモニック命令をTENSHOU.EXEのメモリに書き換える
	WriteProcessMemory( CommonGlobalHandle::curProcess, (LPVOID)(pTenshouExeJumpFromToOnTenshouExeViewingJobNoInBushouDetail), cmdOnTenshouExeJumpFromJobNoInBushouDetail, 5, NULL); //5バイトのみ書き込む
}





// 武将構造データの拡張部分のうち、「職業(出自)」のデータ。(海賊,高家,商人,庶民,切支丹)
byte nb6_all_bushou_job_ex[GAMEDATASTRUCT_RETSUDEN_NUM] = {
0x00,
0x00,
0x00,
0x00,
0x00,
0x80,
0x80,
0x70,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x60,
0x90,
0x00,
0x70,
0x00,
0x00,
0x00,
0x90,
0x00,
0x00,
0x60,
0x00,
0x90,
0x00,
0x00,
0x00,
0x60,
0x60,
0x80,
0x80,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x90,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x60,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x50,
0x80,
0x00,
0x00,
0x70,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x90,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x90,
0x90,
0x00,
0x00,
0x00,
0x90,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x80,
0x50,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x50,
0x60,
0x00,
0x00,
0x00,
0x60,
0x60,
0x00,
0x90,
0x90,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x60,
0x00,
0x50,
0x00,
0x00,
0x00,
0x00,
0x50,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x60,
0x00,
0x60,
0x00,
0x60,
0x00,
0x60,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x90,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x60,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x60,
0x60,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x70,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x50,
0x50,
0x60,
0x00,
0x00,
0x50,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x80,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x60,
0x60,
0x60,
0x50,
0x50,
0x50,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x70,
0x90,
0x00,
0x00,
0x00,
0x90,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x90,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x50,
0x00,
0x00,
0x00,
0x90,
0x00,
0x00,
0x50,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x50,
0x50,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x90,
0x90,
0x90,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x50,
0x50,
0x00,
0x90,
0x90,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x50,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x70,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x50,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x90,
0x00,
0x90,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x80,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x80,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x90,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x90,
0x00,
0x00,
0x00,
0x00,
0x60,
0x00,
0x00,
0x00,
0x50,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x90,
0x00,
0x70,
0x90,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
};